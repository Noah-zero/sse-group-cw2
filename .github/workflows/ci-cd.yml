name: CI/CD Pipeline

permissions:
  contents: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # python-formatting:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.12'

  #     - name: Install Black
  #       run: pip install black

  #     - name: Auto format code with Black
  #       run: |
  #         black .
  #         git diff

  #     - name: Commit formatted code if needed
  #       uses: EndBug/add-and-commit@v9
  #       with:
  #         add: '.'
  #         message: 'Automatically format code with Black'
  #         author_name: 'github-actions'
  #         author_email: 'github-actions@github.com'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # unit-test:
  #   needs: python-formatting
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.12

  #     - name: Install Chat dependencies
  #       run: pip install -r chat/requirements.txt

  #     - name: Install SPA dependencies
  #       run: pip install -r spa/requirements.txt

  #     - name: Install pytest
  #       run: pip install pytest

  #     - name: Run Chat tests
  #       working-directory: ./chat
  #       env:
  #         PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/chat
  #       run: pytest tests/ -v

  #     - name: Run SPA tests
  #       working-directory: ./spa
  #       env:
  #         PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/spa
  #       run: pytest tests/ -v

  build:
    # needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Chat Image
        working-directory: ./chat
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/chat:latest .

      - name: Build SPA Image
        working-directory: ./spa
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spa:latest .

      - name: Build Nginx Image
        working-directory: ./nginx
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest .

      - name: Push Chat Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/chat:latest

      - name: Push SPA Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spa:latest

      - name: Push Nginx Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest
  
  integration-test:
      needs: build
      runs-on: ubuntu-latest
      env:
        AUTH_SERVICE_URL: ${{ secrets.AUTH_SERVICE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        CLIENT_XUNFEI_API_KEY_1: ${{ secrets.CLIENT_XUNFEI_API_KEY_1 }}
        CLIENT_XUNFEI_API_KEY_2: ${{ secrets.CLIENT_XUNFEI_API_KEY_2 }}
        CLIENT_XUNFEI_BASE_URL: ${{ secrets.CLIENT_XUNFEI_BASE_URL }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Install docker-compose
          run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

        - name: Start Integration Environment
          run: docker-compose up -d --scale chat=2
        
        - name: Wait for services to be ready
          run: sleep 15
        
        - name: Run Integration Tests
          run: |
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost/health)
            if [ "$STATUS" -ne 200 ]; then
              echo "Integration test failed: expected HTTP 200, got $STATUS"
              exit 1
            fi
            echo "Integration test passed"
        
        - name: Stop Integration Environment
          run: docker-compose -f integration-compose.yml down

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install Tsuru CLI
  #       run: |
  #         curl -L https://github.com/tsuru/tsuru/releases/download/v1.13.0/tsuru-cli_1.13.0_linux_amd64.tar.gz -o tsuru-cli.tar.gz
  #         tar -zxvf tsuru-cli.tar.gz
  #         sudo mv tsuru /usr/local/bin/tsuru

  #     - name: Login to Tsuru
  #       run: |
  #         tsuru login -a ${{ secrets.TSURU_HOST }} -u ${{ secrets.TSURU_USER }} -p ${{ secrets.TSURU_PASSWORD }}

  #     - name: Deploy SPA
  #       run: |
  #         tsuru app-deploy -a spa -i ${{ secrets.DOCKERHUB_USERNAME }}/spa:latest

  #     - name: Deploy Chat and Scale to 2 Instances
  #       run: |
  #         tsuru app-deploy -a chat -i ${{ secrets.DOCKERHUB_USERNAME }}/chat:latest
  #         tsuru app-scale -a chat -n 2

  #     - name: Deploy Nginx
  #       run: |
  #         tsuru app-deploy -a nginx -i ${{ secrets.DOCKERHUB_USERNAME }}/nginx:latest
